#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('../databases/mongodb');

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const WebSocket = require('ws');
const fs = require('fs');
const path = require('path');
const cron = require('node-cron');
const { updateDataSymbol, generateTrade } = require('../cronjob');
const { createDataSession } = require('../init');



var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});
// cron 1 phút
cron.schedule('*/1 * * * *', async () => {
  await createDataSession();
});


// cron 1 giây
cron.schedule('* * * * * * *', async () => {
  await updateDataSymbol();
  await generateTrade();
});
const eventModules = fs.readdirSync(path.join(__dirname, '..', 'socketModules')).reduce((acc, file) => {
  const eventName = path.basename(file, '.js');
  acc[eventName] = require(path.join(__dirname, '..', 'socketModules', file));
  return acc;
}, {});

io.on('connection', (socket) => {
  console.log('A user connected');
  Object.keys(eventModules).forEach(eventName => {
    eventModules[eventName](io, socket);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
